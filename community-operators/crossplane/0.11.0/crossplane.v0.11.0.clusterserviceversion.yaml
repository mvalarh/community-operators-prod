apiVersion: operators.coreos.com/v1alpha1
kind: ClusterServiceVersion
metadata:
  annotations:
    alm-examples: '[]'
    capabilities: Basic Install
    categories: Application Runtime, Cloud Provider, Database, Integration & Delivery,
      Networking, Storage
    certified: 'false'
    containerImage: crossplane/crossplane:v0.11.0
    createdAt: '2020-05-26T00:26:47.472599+00:00'
    description: Manage any infrastructure your applications need directly from Kubernetes.
    repository: https://github.com/crossplane/crossplane
    support: Crossplane Developers
  name: crossplane.v0.11.0
  namespace: crossplane-system
spec:
  apiservicedefinitions: {}
  customresourcedefinitions:
    owned:
    - description: clusterpackageinstalls.packages.crossplane.io
      displayName: ClusterPackageInstall
      kind: ClusterPackageInstall
      name: clusterpackageinstalls.packages.crossplane.io
      version: v1alpha1
    - description: A KubernetesTarget is a scheduling target for a Kubernetes Application.
      displayName: KubernetesTarget
      kind: KubernetesTarget
      name: kubernetestargets.workload.crossplane.io
      version: v1alpha1
    - description: A ScopeDefinition registers a kind of Kubernetes custom resource
        as a valid OAM scope kind by referencing its CustomResourceDefinition. The
        CRD is used to validate the schema of the scope when it is embedded in an
        OAM ApplicationConfiguration.
      displayName: ScopeDefinition
      kind: ScopeDefinition
      name: scopedefinitions.core.oam.dev
      version: v1alpha2
    - description: A ManualScalerTrait determines how many replicas a workload should
        have.
      displayName: ManualScalerTrait
      kind: ManualScalerTrait
      name: manualscalertraits.core.oam.dev
      version: v1alpha2
    - description: packages.packages.crossplane.io
      displayName: Package
      kind: Package
      name: packages.packages.crossplane.io
      version: v1alpha1
    - description: A Bucket is a portable resource claim that may be satisfied by
        binding to a managed resource such as an AWS S3 bucket or Azure storage container.
      displayName: Bucket
      kind: Bucket
      name: buckets.storage.crossplane.io
      version: v1alpha1
    - description: A RedisCluster is a portable resource claim that may be satisfied
        by binding to a Redis managed resource such as a GCP CloudMemorystore instance
        or an AWS ReplicationGroup. Despite the name RedisCluster claims may bind
        to Redis managed resources that are a single node, or not in cluster mode.
      displayName: RedisCluster
      kind: RedisCluster
      name: redisclusters.cache.crossplane.io
      version: v1alpha1
    - description: A KubernetesCluster is a portable resource claim that may be satisfied
        by binding to a Kubernetes cluster managed resource such as an AWS EKS cluster
        or an Azure AKS cluster.
      displayName: KubernetesCluster
      kind: KubernetesCluster
      name: kubernetesclusters.compute.crossplane.io
      version: v1alpha1
    - description: packageinstalls.packages.crossplane.io
      displayName: PackageInstall
      kind: PackageInstall
      name: packageinstalls.packages.crossplane.io
      version: v1alpha1
    - description: A PostgreSQLInstance is a portable resource claim that may be satisfied
        by binding to a PostgreSQL managed resource such as an AWS RDS instance or
        a GCP CloudSQL instance.
      displayName: PostgreSQLInstance
      kind: PostgreSQLInstance
      name: postgresqlinstances.database.crossplane.io
      version: v1alpha1
    - description: A Provider configures a Kubernetes 'provider', i.e. a connection
        to a particular Kubernetes cluster using the referenced Secret.
      displayName: Provider
      kind: Provider
      name: providers.kubernetes.crossplane.io
      version: v1alpha1
    - description: A Component describes how an OAM workload kind may be instantiated.
      displayName: Component
      kind: Component
      name: components.core.oam.dev
      version: v1alpha2
    - description: An InfrastructureDefinition defines a new kind of composite infrastructure
        resource. The new resource is composed of other composite or managed infrastructure
        resources.
      displayName: InfrastructureDefinition
      kind: InfrastructureDefinition
      name: infrastructuredefinitions.apiextensions.crossplane.io
      version: v1alpha1
    - description: A TraitDefinition registers a kind of Kubernetes custom resource
        as a valid OAM trait kind by referencing its CustomResourceDefinition. The
        CRD is used to validate the schema of the trait when it is embedded in an
        OAM ApplicationConfiguration.
      displayName: TraitDefinition
      kind: TraitDefinition
      name: traitdefinitions.core.oam.dev
      version: v1alpha2
    - description: Composition defines the group of resources to be created when a
        compatible type is created with reference to the composition.
      displayName: Composition
      kind: Composition
      name: compositions.apiextensions.crossplane.io
      version: v1alpha1
    - description: stackdefinitions.packages.crossplane.io
      displayName: StackDefinition
      kind: StackDefinition
      name: stackdefinitions.packages.crossplane.io
      version: v1alpha1
    - description: A ContainerizedWorkload is a workload that runs OCI containers.
      displayName: ContainerizedWorkload
      kind: ContainerizedWorkload
      name: containerizedworkloads.core.oam.dev
      version: v1alpha2
    - description: A KubernetesApplication defines an application deployed by Crossplane
        to a Kubernetes cluster, i.e. a portable KubernetesCluster resource claim.
      displayName: KubernetesApplication
      kind: KubernetesApplication
      name: kubernetesapplications.workload.crossplane.io
      version: v1alpha1
    - description: A NoSQLInstance is a portable resource claim that may be satisfied
        by binding to a NoSQL managed resource such as an AWS DynamoDB or an Azure
        CosmosDB instance.
      displayName: NoSQLInstance
      kind: NoSQLInstance
      name: nosqlinstances.database.crossplane.io
      version: v1alpha1
    - description: A MySQLInstance is a portable resource claim that may be satisfied
        by binding to a MySQL managed resource such as an AWS RDS instance or a GCP
        CloudSQL instance.
      displayName: MySQLInstance
      kind: MySQLInstance
      name: mysqlinstances.database.crossplane.io
      version: v1alpha1
    - description: A WorkloadDefinition registers a kind of Kubernetes custom resource
        as a valid OAM workload kind by referencing its CustomResourceDefinition.
        The CRD is used to validate the schema of the workload when it is embedded
        in an OAM Component.
      displayName: WorkloadDefinition
      kind: WorkloadDefinition
      name: workloaddefinitions.core.oam.dev
      version: v1alpha2
    - description: An ApplicationConfiguration represents an OAM application.
      displayName: ApplicationConfiguration
      kind: ApplicationConfiguration
      name: applicationconfigurations.core.oam.dev
      version: v1alpha2
    - description: A MachineInstance is a portable resource claim that may be satisfied
        by binding to a machine instance, which may include Virtual Machine managed
        resources such as an AWS EC2 instance or bare metal managed resources such
        as a Packet Device.
      displayName: MachineInstance
      kind: MachineInstance
      name: machineinstances.compute.crossplane.io
      version: v1alpha1
    - description: An InfrastructurePublication publishes a defined kind of composite
        infrastructure resource. Published infrastructure resources may be bound to
        an application via an infrastructure requirement.
      displayName: InfrastructurePublication
      kind: InfrastructurePublication
      name: infrastructurepublications.apiextensions.crossplane.io
      version: v1alpha1
    - description: A KubernetesApplicationResource is a resource of a Kubernetes application.
        Each resource templates a single Kubernetes resource to be deployed to its
        scheduled KubernetesCluster.
      displayName: KubernetesApplicationResource
      kind: KubernetesApplicationResource
      name: kubernetesapplicationresources.workload.crossplane.io
      version: v1alpha1
  description: |
    # Overview

    ![Crossplane](media/banner.png)

    Crossplane is an open source Kubernetes add-on that extends any cluster with
    the ability to provision and manage cloud infrastructure, services, and
    applications using kubectl, GitOps, or any tool that works with the Kubernetes
    API.

    With Crossplane you can:

      * **Provision & manage cloud infrastructure with kubectl**
        * [Install Crossplane] to provision and manage cloud infrastructure and
          services from any Kubernetes cluster.
        * Provision infrastructure primitives from any provider ([GCP], [AWS],
          [Azure], [Alibaba], on-prem) and use them alongside existing application
          configurations.
        * Version, manage, and deploy with your favorite tools and workflows that
          you're using with your clusters today.

      * **Publish custom infrastructure resources for your applications to use**
        * Define, compose, and publish your own [infrastructure resources] with
          declarative YAML, resulting in your own infrastructure CRDs being added to
          the Kubernetes API for applications to use.
        * Hide infrastructure complexity and include policy guardrails, so
          applications can easily and safely consume the infrastructure they need,
          using any tool that works with the Kubernetes API.
        * Consume infrastructure resources alongside any Kubernetes application to
          provision and manage the cloud services they need with Crossplane as an
          add-on to any Kubernetes cluster.

      * **Deploy applications using a team-centric approach with OAM**
        * Define cloud native applications and the infrastructure they require with
          the Open Application Model ([OAM]).
        * Collaborate with a team-centric approach with a strong separation of
          concerns:
            * Infrastructure operators - provide infrastructure and services for
              applications to consume
            * Application developers - build application components independent of
              infrastructure
            * Application operators - compose, deploy, and run application
              configurations
        * Deploy application configurations from app delivery pipelines or GitOps
          workflows, using the proven Kubernetes declarative model.

    ## Getting Started
    [Install Crossplane] into any Kubernetes cluster to get started.

    ## Mission

    Crossplane strives to be the best Kubernetes add-on to provision and manage the
    infrastructure and services your applications need directly from kubectl. A
    huge part of this mission is arriving at an elegant, flexible way to define,
    compose, and publish your own infrastructure resources to the Kubernetes API
    and to model and manage cloud native applications.

    The path of cloud native apps from developer laptop into production requires
    collaboration across teams to build the app itself, deploy and manage the app
    and it's infrastructure, and publishing infrastructure resources that embody
    organizational best practices and security policies.

    Today, multiple tools and management models must be glued together in
    deployment pipelines that are often fragile and error prone. Teams can find it
    difficult to collaborate in an effective way when aspects of an application are
    blurred, resulting in a lack of clear ownership and conflicts integrating
    changes. Requiring team members to master multiple tools, languages, and
    philosophies, while understanding the interactions and failure modes between
    them can significantly impede an organization's ability to deliver applications
    efficiently.

    Crossplane believes that a team-centric approach with a strong separation of
    concerns combined with the proven Kubernetes declarative model is the best way
    to provision and manage infrastructure and cloud native applications. Teams
    should be able to publish infrastructure resources for applications to consume,
    define application components independent of infrastructure, and compose both
    into complete application configurations -- all using declarative YAML that can
    be deployed with kubectl from app delivery pipelines or with GitOps workflows.

    This team-centric approach reflects individuals often specializing in the
    following roles:

        *   **Infrastructure Operators** - provide infrastructure and services for apps
            to consume
        *   **Application Developers** - build application components independent of
            infrastructure
        *   **Application Operators** - compose, deploy, and run application
            configurations

    This separation of concerns is core to Crossplane's approach to infrastructure
    and application management, so team members can deliver value by focusing on
    what they know best.

    With Crossplane, infrastructure operators can define custom infrastructure
    resources with declarative YAML and publish them for applications to consume
    as Kubernetes custom resources or with any tool that works with the Kubernetes
    API. These infrastructure resources can be used with existing Kubernetes
    applications (Deployments, Services) and with application definition models
    like OAM.

    The result is a consistent, integrated, and modular approach to managing
    infrastructure and application configurations, that can be deployed with the
    same tooling including kubectl, GitOps, and anything can talk with the
    Kubernetes API.

    <!-- Named Links -->

    [Install Crossplane]: getting-started/install.md
    [Custom Resource Definitions]: https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/
    [reconciling]: https://kubernetes.io/docs/concepts/architecture/controller/
    [GCP]: https://github.com/crossplane/provider-gcp
    [AWS]: https://github.com/crossplane/provider-aws
    [Azure]: https://github.com/crossplane/provider-azure
    [Alibaba]: https://github.com/crossplane/provider-alibaba
    [infrastructure resources]: https://blog.crossplane.io/crossplane-v0-10-compose-and-publish-your-own-infrastructure-crds-velero-backup-restore-compatibility-and-more/
    [OAM]: https://oam.dev/#implementation
  displayName: Crossplane
  icon:
  - base64data: iVBORw0KGgoAAAANSUhEUgAAACgAAAAoCAYAAACM/rhtAAABhGlDQ1BJQ0MgcHJvZmlsZQAAKJF9kT1Iw0AcxV9TpSJVB4uIiGSoThZERRy1CkWoEGqFVh1MLv0QmjQkKS6OgmvBwY/FqoOLs64OroIg+AHi5Oik6CIl/i8ptIjx4Lgf7+497t4BQq3ENKttDNB020wl4mImuyKGXhHEELrRh4DMLGNWkpLwHV/3CPD1Lsaz/M/9ObrUnMWAgEg8wwzTJl4nntq0Dc77xBFWlFXic+JRky5I/Mh1xeM3zgWXBZ4ZMdOpOeIIsVhoYaWFWdHUiCeJo6qmU76Q8VjlvMVZK1VY4578heGcvrzEdZqDSGABi5AgQkEFGyjBRoxWnRQLKdqP+/gHXL9ELoVcG2DkmEcZGmTXD/4Hv7u18hPjXlI4DrS/OM7HMBDaBepVx/k+dpz6CRB8Bq70pr9cA6Y/Sa82tegR0LMNXFw3NWUPuNwB+p8M2ZRdKUhTyOeB9zP6pizQewt0rnq9NfZx+gCkqavkDXBwCIwUKHvN590drb39e6bR3w8ZfXKD6dodOgAAAAZiS0dEAMgAAAAAICYYZQAAAAlwSFlzAAAN1wAADdcBQiibeAAAAAd0SU1FB+QDHg4YMBg7LLcAAAKTSURBVFjD7Zc/aBNhGMaf97u75Cq1g6FtootLKW1jqaaLhSo41EFQUlP/DI46uCr1TwJe0OLmaKkOdVEsLoIUBw0OgRak4H9pBN1KhBqQtjQmd7nXIQg21uZyyV1u6DPevfd9v3ve73s+PmBb9YkaMUhO09oU6P0gtAMAGMs6lPcBTVtpKuDqzUQPSuYtgE4AkCpelwA8ZZiJNu32ouuAa8n4OWbcA6BWKc0T4XzrjYmHduYRtpxLxseY8cACHAC0mMCU8fz4qCsOrmlakKFnALRZ/GRdHfy0KId+dIGpmwbTWUcdZBQTNuAOANgJwVcdbTFrmgDojA24P393llkTjgH+LDsXsAVXVjvepAKOAfqBVktwkY+ZTeDKMg3nAH9Vry87tzu3/78VppAcA2yx19aN8rmQg7bh3Apqt+AaAbj1hthEaSXMbgFW3xAVuk6x+Ut6lNwAXFcjn2tqa1zE5l6K3oO1TiS7sebiIjb3gnqH7DhRG6CahxrOuAZXM6A6nCaowjLcNRpLp6hnuJ5dWJuDfsG1OFcvXCODeoMmxSjX01ZHASdFFNMUpkaNJxoPt6+JJ8kO0rdoqyU4uYSCc4AczAEoVj5OSiffTlPYyggFFFaWHAOkvidFME9VHl+z6BuwdkOju/NDp/LOrsFVZRzArI3j61nJ+HbFlYs7M+jxwuXDd+SRERAFd6HYcchYPqaWyt1ngjnj2/sIIJ2Zs8Lk1OvI0VcA2BXAfxbWh4l+QzfffV/KQteLICJ0R++Tp2JGSBI694Sg+HxNjJkqkiQJnaEQZEVhTwICgCRL6AiGDM8CAoCsSN5ykA2zMtvyngL0D5S+Alj4K4dmPAVIpJmqXzoCwgVmPq1+6bqIbXlEvwH2we+YDAREaAAAAABJRU5ErkJggg==
    mediatype: image/png
  install:
    spec:
      clusterPermissions:
      - rules:
        - apiGroups:
          - ''
          resources:
          - events
          verbs:
          - create
          - update
          - patch
          - delete
        - apiGroups:
          - ''
          resources:
          - secrets
          verbs:
          - get
          - list
          - watch
          - create
          - update
        - apiGroups:
          - apiextensions.k8s.io
          resources:
          - customresourcedefinitions
          verbs:
          - get
          - list
          - watch
          - create
          - update
        - apiGroups:
          - apiextensions.crossplane.io
          - cache.crossplane.io
          - compute.crossplane.io
          - core.oam.dev
          - database.crossplane.io
          - kubernetes.crossplane.io
          - packages.crossplane.io
          - storage.crossplane.io
          - workload.crossplane.io
          resources:
          - '*'
          verbs:
          - '*'
        serviceAccountName: crossplane
      - rules:
        - apiGroups:
          - '*'
          resources:
          - '*'
          verbs:
          - '*'
        serviceAccountName: crossplane-package-manager
      deployments:
      - name: crossplane
        spec:
          replicas: 1
          selector:
            matchLabels:
              name: crossplane
          template:
            metadata:
              labels:
                name: crossplane
            spec:
              containers:
              - image: crossplane/crossplane:v0.11.0
                imagePullPolicy: Always
                name: crossplane
              serviceAccountName: crossplane
      - name: crossplane-package-manager
        spec:
          replicas: 1
          selector:
            matchLabels:
              name: crossplane-package-manager
          template:
            metadata:
              labels:
                name: crossplane-package-manager
            spec:
              containers:
              - args:
                - package
                - manage
                - --templates
                - --templating-controller-image
                - crossplane/templating-controller:v0.4.0
                - --debug
                env:
                - name: POD_NAME
                  valueFrom:
                    fieldRef:
                      apiVersion: v1
                      fieldPath: metadata.name
                - name: POD_NAMESPACE
                  valueFrom:
                    fieldRef:
                      apiVersion: v1
                      fieldPath: metadata.namespace
                - name: PACKAGE_MANAGER_IMAGE
                  value: crossplane/crossplane:v0.11.0
                image: crossplane/crossplane:v0.11.0
                imagePullPolicy: Always
                name: crossplane
              serviceAccountName: crossplane-package-manager
    strategy: deployment
  installModes:
  - supported: true
    type: OwnNamespace
  - supported: false
    type: SingleNamespace
  - supported: false
    type: MultiNamespace
  - supported: true
    type: AllNamespaces
  keywords:
  - cloud
  - infrastructure
  - services
  - application
  - database
  - cache
  - bucket
  - infra
  - app
  - ops
  - oam
  - gcp
  - azure
  - aws
  - alibaba
  - cloudsql
  - rds
  - s3
  - azuredatabase
  - asparadb
  - gke
  - aks
  - eks
  links:
  - name: GitHub
    url: https://github.com/crossplane/crossplane
  - name: Website
    url: https://crossplane.io
  - name: Twitter
    url: https://twitter.com/crossplane_io
  - name: Slack
    url: https://slack.crossplane.io/
  maintainers:
  - email: info@crossplane.io
    name: Crossplane Maintainers
  maturity: alpha
  provider:
    name: Upbound
  replaces: crossplane.v0.9.0
  version: 0.11.0
