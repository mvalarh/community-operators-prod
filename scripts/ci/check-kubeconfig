#!/usr/bin/env bash

for f in "$(cd "$(dirname ${BASH_SOURCE[0]})/.." && pwd)"/lib/*; do
  . "$f"
done

export_color
CONTEXT="$(kubectl config view -o jsonpath='{.current-context}')"

if [[ -f $KUBECONFIG && "${CONTEXT}" != ""  ]]; then
    READY=1

    IP="$(kubectl config view -o jsonpath="{.clusters[?(@.name=='$CONTEXT')].cluster.server}")"
    echo ${IP#*//} | sed -e "s/:/ /" | while read ip port
    do
      {
        set -e
        nc -zvw3 $ip $port 2> /dev/null
      } || {
        printf "Kube api not listening on $ip:$port %s[ ${ERR} FAILED ${NC} ]\n" | expand  -t 50 >&2
        exit 1
      }
      if [[ $(kubectl cluster-info | grep -q 'running') && $READY == 0 ]]; then
        printf "cluster is running and ready for installing olm %s\t[ ${OK} OK ${NC} ]\n"  | expand  -t 50;
      else
        printf "cluster probably not running %s\t[ ${ERR} FAILED ${NC} ]\n" | expand  -t 50 >&2
        exit 1
      fi

      if [[ $CONTEXT != '' ]]; then
        printf "Find kube config %s\t[ ${OK} CONTEXT: ${CONTEXT} ${NC} ]\n"  | expand  -t 50;
      else
        printf "Find kube config %s\t[ ${WARN} NOT FOUND ${NC} ]\n"  | expand  -t 50; make minikube.start;
      fi
    done

else
    printf "Find kube config %s\t[ ${WARN} NOT FOUND ${NC} ]\n"  | expand  -t 50; make minikube.start;
fi